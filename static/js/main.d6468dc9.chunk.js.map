{"version":3,"sources":["Spin/spin.component.tsx","Spin/spin.helper.ts","roulette.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Spin","ref","size","items","time","selected","Math","round","random","length","background","onFinish","spinRef","useRef","offset","rotateDeg","useMemo","pieceDeg","start","end","betweenDeg","floor","current","startSpin","useCallback","style","transition","transform","setTimeout","useImperativeHandle","width","height","margin","userSelect","borderRadius","className","map","item","idx","clip","backgroundColor","toString","SpinItem","children","display","flexDirection","justifyContent","alignItems","textAlign","overflow","forwardRef","exampleItems","count","Array","fill","_","i","color","lineHeight","App","useState","howMany","setHowMany","done","setDone","spinHandlerRef","position","paddingTop","top","left","selectedIdx","backgroundImage","bg","backgroundPosition","backgroundSize","backgroundRepeat","padding","type","id","min","max","step","value","onChange","e","Number","target","onClick","window","location","reload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6468dc9.chunk.js","sourcesContent":["import React, {\n  useImperativeHandle,\n  forwardRef,\n  useRef,\n  useMemo,\n  useCallback,\n} from \"react\";\n\nimport \"./style.css\";\nimport { randomColor } from \"./spin.helper\";\nimport { HandlerRef, Option } from \"./spin.types\";\n\ntype Props<Item> = {\n  size: number;\n  items?: Item[];\n  time?: number;\n  selected?: number;\n  options?: Option;\n  background?: any;\n  onFinish?: (selectedIdx: number) => void;\n};\n\nfunction Spin<Item>(\n  {\n    size,\n    items = [],\n    time = 15000,\n    selected = Math.round(Math.random() * items.length),\n    background,\n    onFinish,\n  }: Props<Item>,\n  ref: React.Ref<HandlerRef> | undefined\n) {\n  const spinRef = useRef<HTMLDivElement>(null);\n\n  const offset = useRef(360 / items.length / 2);\n  const rotateDeg = useMemo(() => {\n    const pieceDeg = 360 / items.length;\n    const start = (selected - 1) * pieceDeg;\n    const end = selected * pieceDeg;\n    const betweenDeg = start + Math.floor(Math.random() * (end - start));\n    const rotate = 360 * Math.floor(3 + Math.random() * 100);\n    const total = rotate - betweenDeg + offset.current;\n    return total;\n  }, []);\n\n  const startSpin = useCallback(() => {\n    if (spinRef.current) {\n      spinRef.current.style.transition = `transform ${\n        time / 1000\n      }s ease-in-out`;\n      spinRef.current.style.transform = `rotate(${rotateDeg}deg)`;\n    }\n\n    setTimeout(() => {\n      onFinish && onFinish(selected);\n    }, time);\n  }, [items]);\n\n  useImperativeHandle(ref, () => ({ startSpin }));\n\n  return (\n    <div\n      style={{\n        width: `${size}px`,\n        height: `${size}px`,\n        margin: \"auto\",\n        userSelect: \"none\",\n        borderRadius: \"50%\",\n      }}\n    >\n      <div\n        ref={spinRef}\n        className={\"container\"}\n        style={{\n          ...background,\n        }}\n      >\n        {items.map((item, idx) => (\n          <div\n            key={idx}\n            className={\"box\"}\n            style={{\n              clip: `rect(0px, ${size}px, ${size}px, ${size / 2}px)`,\n              transform: `rotate(${\n                (360 / items.length) * idx - offset.current\n              }deg)`,\n            }}\n          >\n            <div\n              style={{\n                transform: `rotate(${360 / items.length / 2}deg)`,\n              }}\n              className={\"content\"}\n            >\n              {item}\n            </div>\n            <div\n              className={\"item\"}\n              style={{\n                backgroundColor: randomColor(),\n                // opacity: \"0.9\",\n                clip: `rect(0px, ${size / 2}px, ${size}px, 0px)`,\n                transform: `rotate(${360 / items.length}deg)`,\n              }}\n            ></div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport const SpinItem = ({ children }: { children: React.ReactElement }) => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        textAlign: \"center\",\n        overflow: \"hidden\",\n      }}\n    >\n      {children}\n    </div>\n  );\n};\nexport default forwardRef<HandlerRef, Props<any>>(Spin);\n","export const randomColor = () =>\n  `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n","export default __webpack_public_path__ + \"static/media/roulette.dbfaf713.png\";","import React, { useRef, useState } from \"react\";\n\nimport Spin, { SpinItem } from \"./Spin/spin.component\";\nimport { HandlerRef } from \"./Spin/spin.types\";\nimport bg from \"./roulette.png\";\nfunction App() {\n  const [howMany, setHowMany] = useState(5);\n  const [done, setDone] = useState(false);\n\n  const spinHandlerRef = useRef<HandlerRef>(null);\n\n  const handleStartSpin = () => {\n    if (done) {\n      window.location.reload();\n      return;\n    }\n    spinHandlerRef.current?.startSpin();\n  };\n\n  const handleSpinComplete = (selectedIdx: number) => {\n    setDone(true);\n  };\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        position: \"relative\",\n        paddingTop: \"45px\",\n        width: \"500px\",\n        margin: \"auto\",\n        backgroundColor: \"#eee\",\n      }}\n    >\n      <div\n        style={{\n          width: \"30px\",\n          height: \"30px\",\n          clip: \"rect(15px, 45px, 45px, -15px)\",\n          position: \"absolute\",\n          top: 0,\n          left: \"250px\",\n          transform: \"translateX(-50%)\",\n        }}\n      >\n        <div\n          style={{\n            width: \"30px\",\n            height: \"30px\",\n            backgroundColor: \"red\",\n            transform: \"rotate(45deg)\",\n          }}\n        ></div>\n      </div>\n      <Spin\n        ref={spinHandlerRef}\n        size={500}\n        // selected={5}\n        time={2000}\n        items={exampleItems(howMany)}\n        onFinish={handleSpinComplete}\n        background={{\n          backgroundImage: `url('${bg}')`,\n          backgroundPosition: \"center center\",\n          backgroundSize: \"cover\",\n          backgroundRepeat: \"no-repeat\",\n        }}\n      />\n      <div\n        style={{\n          padding: \"2rem\",\n        }}\n      >\n        <input\n          type=\"range\"\n          id=\"slider\"\n          min=\"0\"\n          max=\"100\"\n          step=\"1\"\n          value={howMany}\n          onChange={(e) => {\n            setHowMany(Number(e.target.value));\n          }}\n        />\n        <button onClick={handleStartSpin}>\n          ( {howMany} ){done ? \"again\" : \"Pick\"}\n        </button>\n      </div>\n    </div>\n  );\n}\n\nconst exampleItems = (count: number) =>\n  Array(count)\n    .fill(0)\n    .map((_, i) => (\n      <SpinItem key={i}>\n        <div\n          style={{\n            height: \"30px\",\n            width: \"30px\",\n            backgroundColor: \"red\",\n            color: \"white\",\n            borderRadius: \"50%\",\n            lineHeight: \"30px\",\n          }}\n        >\n          {i + 1}\n        </div>\n      </SpinItem>\n    ));\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}